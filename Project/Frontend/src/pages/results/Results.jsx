import React from 'react';
import { useLocation, Link } from 'react-router-dom';
import {Camera, Download, AlertTriangle, XCircle, EyeOff } from 'lucide-react';
import EyeResultCard from './EyeResultCard';
import { exportToPDF } from './ReportExporter';
import ErrorState from "../ErrorState.jsx";

const Results = () => {
    const location = useLocation();
    const error = location.state?.error;
    const processedResults = location.state?.processedResults;
    const parsedResults = JSON.parse(location.state?.results?.body || '{}');

   if (error) {
    return <ErrorState error={error} />;
   }

   const eyes = []
    if (processedResults) {
        const {left_eye, right_eye} = parsedResults;

        if (left_eye) {
            eyes.push({
                side: 'Left Eye',
                detected: left_eye.best_prediction !== 'Not Detected',
                prediction: left_eye.best_prediction,
                scores: left_eye.average_scores,
                image: left_eye.image_preview || null,
                gradCam: left_eye.grad_cam_preview || null,
            });
        }

        if (right_eye) {
            eyes.push({
                side: 'Right Eye',
                detected: right_eye.best_prediction !== 'Not Detected',
                prediction: right_eye.best_prediction,
                scores: right_eye.average_scores,
                image: right_eye.image_preview || null,
                gradCam: right_eye.grad_cam_preview || null,
            });
        }
    } else {
        // Scenario 1 — uploaded cropped eye
        const { left_eye } = parsedResults;

        eyes.push({
            side: 'Eye',
            detected: left_eye.best_prediction !== 'Not Detected',
            prediction: left_eye.best_prediction,
            scores: left_eye.average_scores,
            image: left_eye.image_preview || null,
            gradCam: left_eye.grad_cam_preview || null,
        });
    }

    if (eyes.length === 0) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
                <div className="bg-white shadow rounded-lg p-8 w-full max-w-lg text-center">
                    <EyeOff className="text-gray-500 w-16 h-16 mx-auto mb-4"/>
                    <h2 className="text-2xl font-bold text-gray-700 mb-2">No Results</h2>
                    <p className="text-gray-600 mb-4">We couldn’t find any results from your scan.</p>
                    <Link to="/scan" className="btn btn-primary inline-flex items-center">
                        <Camera className="mr-2"/> Take a Scan
                    </Link>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 py-12">
            <div className="max-w-4xl mx-auto">
                <h1 className="text-4xl font-bold text-center mb-4">Analysis Results</h1>
                <p className="text-center mb-8">Here are the results from your eye health scan</p>

                {eyes.map((eye) => (
                    <EyeResultCard key={eye.side} {...eye} />
                ))}

                <div className="flex justify-center gap-4 mt-6">
                    <Link to="/scan" className="btn btn-primary">
                        <Camera className="mr-2" /> Take Another Scan
                    </Link>
                    <button onClick={() => exportToPDF({ eyes })} className="btn btn-outline-primary">
                        <Download className="mr-2" /> Download Results
                    </button>
                </div>

                <div className="bg-yellow-50 border rounded-lg p-6 mt-6 flex">
                    <AlertTriangle className="text-yellow-600 mr-3" />
                    <p className="text-yellow-800">
                        These results are generated by AI and are for informational purposes only.
                        Please consult a qualified professional for medical evaluation.
                    </p>
                </div>
            </div>
        </div>
    );
};

export default Results;